
import React,{useEffect,useState} from 'react'
function generateFixtures(players){ const fixtures=[]; for(let i=0;i<players.length;i++){ for(let j=i+1;j<players.length;j++){ fixtures.push({id:'f_'+i+'_'+j,p1:players[i].id,p2:players[j].id,played:false,result:null,duration:0}) } } return fixtures }
export default function Tournament({account}){ const [players,setPlayers]=useState(()=> JSON.parse(localStorage.getItem('cw_tournament_players')||'[]')); const [fixtures,setFixtures]=useState(()=> JSON.parse(localStorage.getItem('cw_tournament_fixtures')||'[]')); const [phase,setPhase]=useState(localStorage.getItem('cw_tournament_phase')||'signup'); useEffect(()=>{ localStorage.setItem('cw_tournament_players', JSON.stringify(players)) },[players]); useEffect(()=>{ localStorage.setItem('cw_tournament_fixtures', JSON.stringify(fixtures)) },[fixtures]); useEffect(()=>{ localStorage.setItem('cw_tournament_phase', phase) },[phase])
function joinTournament(){ if(players.find(p=>p.id===account.id)) return alert('Already joined'); if(players.length>=10) return alert('Tournament full (10 players)'); const p={id:account.id,name:account.name,points:0,totalTime:0}; setPlayers([...players,p]) }
function startRoundRobin(){ if(players.length<4) return alert('Need at least 4 players'); const f=generateFixtures(players); setFixtures(f); setPhase('group'); alert('Round-robin started with '+players.length+' players') }
function recordResult(fixtureId,result,d1,d2){ const idx=fixtures.findIndex(f=>f.id===fixtureId); if(idx<0) return; const nf=[...fixtures]; nf[idx]={...nf[idx],played:true,result,duration:d1+d2}; setFixtures(nf); const pls=players.map(p=>({...p})); const p1=pls.find(x=>x.id===nf[idx].p1); const p2=pls.find(x=>x.id===nf[idx].p2); if(result==='p1'){p1.points+=2}else if(result==='p2'){p2.points+=2}else{p1.points+=1; p2.points+=1} p1.totalTime+=d1; p2.totalTime+=d2; setPlayers(pls) }
function computeStandings(){ return [...players].sort((a,b)=> b.points - a.points || a.totalTime - b.totalTime) }
function advanceToPlayoffs(){ const sorted=computeStandings(); const top=sorted.slice(0,4); localStorage.setItem('cw_tournament_playoffs', JSON.stringify(top)); setPhase('playoffs'); alert('Top 4 advanced to playoffs') }
return (<div className='bp-page'><h2>Tournament Lobby</h2><div style={{display:'flex',gap:20}}><div style={{flex:1}}><div className='panel'><h3>Players ({players.length}/10)</h3>{players.map(p=> <div key={p.id} style={{padding:6}}>{p.name} • {p.points} pts • {p.totalTime}s</div>)}</div><div className='panel'>{phase==='signup' && <button className='btn primary' onClick={joinTournament}>Join Tournament</button>}{phase==='signup' && <button className='btn' onClick={startRoundRobin}>Start Round-Robin</button>}{phase==='group' && <button className='btn primary' onClick={advanceToPlayoffs}>Advance to Playoffs (top 4)</button>}</div></div><div style={{width:420}} className='panel'><h3>Standings</h3>{computeStandings().map((p,idx)=>(<div key={p.id} style={{padding:6,display:'flex',justifyContent:'space-between'}}>{idx+1}. {p.name} <span>{p.points} pts • {p.totalTime}s</span></div>))}</div></div><div style={{marginTop:20}} className='panel'><h4>Fixtures</h4>{fixtures.length===0 && <div className='muted'>No fixtures yet</div>}{fixtures.map(f=> <div key={f.id} style={{display:'flex',justifyContent:'space-between',padding:8}}><div>{(players.find(p=>p.id===f.p1)||{name:f.p1}).name} vs {(players.find(p=>p.id===f.p2)||{name:f.p2}).name}</div><div>{f.played? 'Played':'Pending'} { !f.played && <button className='btn' onClick={()=>{ const d1=Math.floor(Math.random()*600)+30; const d2=Math.floor(Math.random()*600)+30; const r=Math.random(); const res = r<0.45? 'p1' : r>0.55? 'p2' : 'draw'; recordResult(f.id,res,d1,d2) }}>Simulate</button> }</div></div>)}</div></div>) }
